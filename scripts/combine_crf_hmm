#!/usr/bin/perl

#########################################################
# Merge predictions of CRF and HMM classifiers.
# 
#########################################################

use strict;
use POSIX;
use utf8;

binmode(STDIN,":utf8");
binmode(STDOUT,":utf8");
binmode(STDERR,":utf8");

my $crfout = $ARGV[0];
my $lmout = $ARGV[1];
my $sgm = $ARGV[2];

my @crf = load($crfout);
my @lm = load($lmout);
my @m;

my %lt;
lowerInTitle();

## always use CRF:
# BLEU:  0.7899   0.6507   0.5410   0.4519   0.3782   0.3170   0.2661   0.2237   0.1886  
## Use LM if CRF predicts all uppercase, otherwise use CRF:
# BLEU:  0.7893   0.6506   0.5412   0.4522   0.3786   0.3174   0.2665   0.2241   0.1890  "stanford_a2e_cn_primary"

## Combine predictions:
for my $s (0..$#crf) {
	for my $w (0..$#{$crf[$s]}) {
		my $c = $crf[$s][$w];
		my $l = $lm[$s][$w];
		if(lc($c) ne lc($l)) {
			print STDERR "warning: mismatch: $c $l\n";
		}
		# Rules tuned to maximize BLEU:
		if(all_lower($c)) {
			$m[$s][$w] = $c;
		} elsif(all_upper($c)) {
			$m[$s][$w] = $l;
		} elsif(first_upper($c)) {
			$m[$s][$w] = $c;
		} else {
			$m[$s][$w] = $c;
		}
	}
}

## Fix common casing errors:
for my $s (0..$#crf) {
	for my $w (0..$#{$crf[$s]}) {
		$m[$s][$w] =~ s/^([A-Z])([a-z]*)\-([a-z])/hyph($1,$2,$3)/e;
		$m[$s][$w] =~ s/^([a-z])([a-z]*)\-([A-Z])/hyph($1,$2,$3)/e;
		$m[$s][$w] =~ s/^(a)(l)\-([a-z])/hyph($1,$2,$3)/e;
		$m[$s][$w] =~ s/^(a)(l)\-([A-Z])/hyph($1,$2,$3)/e;
		$m[$s][$w] =~ s/^i'(d|m)$/I'$1/;
		$m[$s][$w] =~ s/^(www|http)$/lc($1)/ei;
		$m[$s][$w] =~ s/^allah/Allah/i;
	}
}

# Create plain file:
my $tmp = `mktemp .tmp.XXXXXX`;
open(T,">$tmp");
for my $s (0..$#m) {
	if($#{$m[$s]} == -1) {
		print "null\n";
	} else {
		for my $w (0..$#{$m[$s]}) {
			my $m = $m[$s][$w];
			print T "$m ";
		}
		print T "\n";
	}
}
close(T);

# Detokenize:
my @out;
open(O, "java edu.stanford.nlp.process.PTBTokenizer -untok $tmp |");
my $line = 0;
while(<O>) {
	chomp;
  $line++;
	s/^ +//;
	s/ +$//;
	my $sent = $_;
	if($sgm ne '') {
		# Make translations XML compliant:
		$sent = '' if $sent eq 'null';
		$sent =~ s/\&/\&amp;/g;
		$sent =~ s/\</\&lt;/g;
		$sent =~ s/\>/\&gt;/g;
	}
	push @out, $sent;
}
close(O);
system("rm $tmp");

# Create XML/SGML or plain file:
my $senti=0;
my $headline=0;
my $pureseg=0;
if($sgm ne '') {
	print STDERR "Creating tstset file from: $sgm\n";
	open(S,$sgm);
	binmode(S,":utf8");
	while(<S>) {
		s/<\/DOC>/<\/doc>/g;
		s/<DOC /<doc /g;
		if(/<hl>/i) {
			$headline = 1;
		} elsif(/<\/hl>/i) {
			$headline = 0;
		} elsif(/srclang="(\S).*" trglang="(\S)/) {
			my $lang = lc($1)."2".lc($2);
			s/<srcset (.*) srclang="(\S+)" trglang="(\S+)">/<tstset $1 srclang="$2" trglang="$3" sysid="stanford_${lang}_cn_primary">/;
		} elsif(/srclang="(\S)/) {
			my $lang = lc($1)."2e";
			s/<srcset (.*) srclang="(\S+)">/<tstset $1 srclang="$2" trglang="English" sysid="stanford_${lang}_cn_primary">/;
		} elsif(/<doc (.*) genre="text" sysid="source">/) {
			s/<doc (.*) genre="(.*)" sysid="source">/<doc $1 genre="$2">/gi;
		} elsif(/<seg id=(\S+)(?: type=(?:\S+))?>(.*)<\/?seg\/?>\s+/g) {
           # /<seg id=(\S+)>(.*)<\/?seg\/?>/
			my ($id,$src) = ($1,$2);
			my $sent = $out[$senti++];
			$sent = capitalize_title($sent) if $headline;
			#$sent = capitalize_title($sent) if $id eq '1' || $headline;
			if($src =~ /^[[:ascii:]]+$/) {
				$sent = $src;
				# Fix spacing:
				$sent =~ s/  +/ /g;
				$sent =~ s/^ +//;
				$sent =~ s/ +$//;
				# Remove IBM classing if still there:
				$sent =~ s/\$[^ ][^ ]*_\(([^ ][^ ]*)\|\|[^ ][^ ]*\)/$1/g;
				$sent =~ s/\$[^ ][^ ]*_\(([^ ][^ ]*)\)/$1/g;
				$sent =~ s/@@/ /g;
				$sent =~ s/ *empty *_ *line */ /gi;
				print STDERR "Preserve input: $sent ($src)\n";
			}
			$sent = '.' unless $sent =~ /\S/;
			s/<seg id=(\S+?)(| type=(\S+))>.*<\/?seg\/?>/<seg id=$1$2> $sent <\/seg>/g;
		} elsif(/<\/srcset>/) {
			s/<\/srcset>/<\/tstset>/;
		} elsif(/<\/?doc.*>/) {
    } elsif(/<\/?p>/) {
    } else {
      print STDERR "warning no match: '$_'\n";
      #exit -1;
    }
		print;
	}
	close(S);
} else {
	foreach(@out) {
		print $_,"\n";
	}
}

###################################

sub load {
	my $file = shift;
	open(F, $file);
	binmode(F,":utf8");
	my @seg;
	while(<F>) {
		chomp;
		my @w = split(/\s+/);
		push @seg, [@w];
	}
	close(F);
	return @seg;
}

sub all_upper {
	my $w = shift;
	return ($w =~ /[A-Z]/ && $w !~ /[a-z]/);
}

sub all_lower {
	my $w = shift;
	return ($w =~ /[a-z]/ && $w !~ /[A-Z]/);
}

sub first_upper {
	my $w = shift;
	my $first = substr($w,0,1);
	my $suffix = substr($w,1);
	return ($first =~ /[A-Z]/ && $suffix !~ /[A-Z]/ && $suffix =~ /[a-z]/);
}

sub hyph {
	return uc($_[0]).$_[1].'-'.uc($_[2]);
}

sub capitalize_first {
	my $w = $_[0].$_[1];
	return $lt{$w} ? $w : uc($_[0]).$_[1];
}

sub capitalize_title {
	my $line = shift;
	#$line =~ s/\.\s*$//;
	#$line =~ s/\."\s*$/"/;
	#$line =~ s/^ *the //gi;
	$line =~ s/^([a-z])/uc($1)/e;
	return join(' ', map { s/^(['"]*[a-z])([a-z]*)/capitalize_first($1,$2)/e; $_ } split(/\s+/,$line));
}

sub lowerInTitle {
# List automatically extracted by Pichuan:
# see: /scr/nlp/data/gale2/truecaser/fixTitle/
	%lt = map {($_,1)} split(/\n/, <<"EOF"
a
about
across
against
an
and
are
as
at
be
between
by
ceremony
cong
delegations
enter
for
from
in
into
is
it
its
news
of
off
on
opening
or
over
overseas
periodical
selection
sentiments
that
the
their
this
through
to
together
towns
up
while
with
within
after
any
do
does
had
have
held
his
my
so
them
those
thus
was
we
EOF
);
}
