<?xml version="1.0"?>
<!--
  Copyright 2007-2008 Amazon Technologies, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at:

  http://aws.amazon.com/apache2.0

  This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
  OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and
  limitations under the License.
-->
<!--
  Modified by O. Zaidan (2010) for the MAISE package.
    (www.cs.jhu.edu/~ozaidan/maise)
-->
<project name="MTurkJavaSDK" default="help" basedir=".">

  <property file="MTurkSDKCode/MTurkSDK-original-rootfiles/build.properties" />
  <property name="release.name" value="${sdk.name}-${major.version}.${minor.version}"/>

  <property name="package.service.name" value="com.amazonaws.mturk.requester"/>
  <property name="package.dataschema.name" value="com.amazonaws.mturk.dataschema"/>
  <property name="output.dir" location="MTurkSDKCode/build"/>
  <property name="lib.dir" location="${output.dir}/lib"/>
  <property name="etc.dir" value="MTurkSDKCode/etc"/>
  <property name="doc.dir" value="MTurkSDKCode/doc"/>
  <property name="dist.dir" location="MTurkSDKCode/dist"/>
  <property name="temp.dir" location="${dist.dir}/temp"/>

  <property name="stub.classes.dir" location="${output.dir}/private/classes/${requester.service.name}"/>
  <property name="stub.src.dir" location="${output.dir}/private/sources/${requester.service.name}"/>
  <property name="stub.jar" value="${lib.dir}/${requester.service.name}.jar"/>
  <property name="dataschema.classes.dir" location="${output.dir}/private/classes/${requester.dataschema.name}"/>
  <property name="dataschema.src.dir" location="${output.dir}/private/sources/${requester.dataschema.name}"/>
  <property name="dataschema.jar" value="${lib.dir}/${requester.dataschema.name}.jar"/>
  <property name="sdk.classes.dir" location="${output.dir}/private/classes/${sdk.name}"/>
  <property name="sdk.test.classes.dir" location="${output.dir}/private/classes/${sdk.name}/test"/>
  <property name="sdk.src.dir" value="MTurkSDKCode/src"/>
  <property name="sdk.test.dir" value="MTurkSDKCode/test"/>
  <property name="sdk.jar" value="${lib.dir}/${sdk.name}.jar"/>
  <property name="sdk.test.jar" value="${lib.dir}/${sdk.name}-test.jar"/>
  <property name="maise.src.dir" value="MTurkSDKCode/maisesrc"/>
  <property name="maise.classes.dir" location="${output.dir}/private/classes/${maise.src.dir}"/>

  <property name="wsdl.location" value="MTurkSDKCode/etc/wsdl/${wsdl.date}/AWSMechanicalTurkRequester.wsdl"/>

  <property name="dataschema.location" value="${etc.dir}/schema/${dataschema.version}/QuestionFormAnswers.xsd"/>

  <property name="third-party.lib.dir" value="MTurkSDKCode/lib/third-party"/>

  <path id="build.deps.classpath">
    <!-- Make sure Xerces comes before jaxme. -->
    <fileset dir="${third-party.lib.dir}" includes="xerces*/*.jar"/>
    <fileset dir="${third-party.lib.dir}" includes="**/*.jar" excludes="xerces*/*.jar"/>
  </path>

  <path id="build.classpath">
    <path refid="build.deps.classpath"/>
    <path location="${dataschema.jar}"/>
    <path location="${stub.jar}"/>
  </path>

  <path id="build.test.classpath">
    <path refid="build.classpath"/>
    <pathelement location="${sdk.jar}"/>
  </path>

  <path id="dist.classpath">
    <fileset dir="MTurkSDKCode/lib">
      <include name="${requester.service.name}.jar"/>
      <include name="${requester.dataschema.name}.jar"/>
      <include name="${sdk.name}.jar"/>
    </fileset>
  </path>

  <path id="build.maise.classpath">
    <path refid="build.classpath"/>
    <pathelement location="${sdk.jar}"/>
    <path refid="dist.classpath"/>
  </path>

  <path id="runtime.classpath">
    <path refid="build.classpath"/>
    <path location="${sdk.jar}"/>
    <path refid="dist.classpath"/>
    <path path="${maise.classes.dir}" />
  </path>

  <path id="test.classpath" >
    <path refid="runtime.classpath"/>
    <path location="${sdk.test.jar}"/>
  </path>
	
  <taskdef name="xjc" classname="org.apache.ws.jaxme.generator.XJCTask">
    <classpath>
      <path refid="build.deps.classpath" />
    </classpath>
  </taskdef>

  <target name="check-dataschema-jar">
    <uptodate property="dataschema-uptodate" srcfile="${dataschema.location}" targetfile="${dataschema.jar}"/>
  </target>

  <target name="dataschema-jar"
          description="Build Jar containing the jaxme generated classes"
          depends="check-dataschema-jar"
          unless="dataschema-uptodate">

    <mkdir dir="${dataschema.src.dir}"/>
    <mkdir dir="${dataschema.classes.dir}"/>

    <echo message="generating dataschema sources" />
    <xjc target="${dataschema.src.dir}"
         package="${package.dataschema.name}"
         schema="${dataschema.location}">
      <produces dir="${dataschema.src.dir}" includes="**/*" />
    </xjc>

    <echo message="compiling dataschema generated sources" />
    <javac srcdir="${dataschema.src.dir}" destdir="${dataschema.classes.dir}" source="1.5" target="1.5">
      <classpath refid="build.deps.classpath"/>
    </javac>

    <copy toDir="${dataschema.classes.dir}">
      <fileset dir="${dataschema.src.dir}">
        <include name="**/jaxb.properties"/>
        <include name="**/Configuration.xml"/>
      </fileset>
    </copy>

    <mkdir dir="${lib.dir}"/>
    <echo message="Creating dataschema jar"/>
    <jar destfile="${dataschema.jar}">
      <fileset dir="${dataschema.classes.dir}" includes="**/*"/>
      <fileset dir="${dataschema.src.dir}" includes="**/*.java"/>
      <!-- Note: The notice file is different for the jars than the distributable. -->
      <fileset dir="${sdk.src.dir}" includes="NOTICE"/>
      <fileset dir="." includes="LICENSE"/>
    </jar>
  </target>
	
  <target name="check-wsdl-jar">
    <uptodate property="wsdl-uptodate" srcfile="${wsdl.location}" targetfile="${stub.jar}"/>
  </target>

  <target name="wsdl-jar"
	  description="Creates the jar containing Axis generated stubs "
	  depends="check-wsdl-jar"
          unless="wsdl-uptodate">

    <mkdir dir="${stub.src.dir}"/>
    <mkdir dir="${stub.classes.dir}"/>

    <echo message="Generating Axis stubs...." />
    <java classname="org.apache.axis.wsdl.WSDL2Java" fork="true">
      <arg line="-W '${wsdl.location}' --package ${package.service.name} --output '${stub.src.dir}'"/>
      <classpath refid="build.deps.classpath"/>
    </java>

    <echo message="Compiling Axis generated stubs..." />
    <javac srcdir="${stub.src.dir}" destdir="${stub.classes.dir}" source="1.5" target="1.5">
      <classpath refid="build.deps.classpath"/>
    </javac>

    <mkdir dir="${lib.dir}"/>

    <echo message="Creating axis jar " />
    <jar destfile="${stub.jar}" >
      <fileset dir="${stub.classes.dir}" includes="**/*.class"/>
      <fileset dir="${stub.src.dir}" includes="**/*.java"/>
      <!-- Note: The notice file is different for the jars than the distributable. -->
      <fileset dir="${sdk.src.dir}" includes="NOTICE"/>
      <fileset dir="." includes="LICENSE"/>
    </jar>
  </target>

  <target name="compile-sdk" depends="wsdl-jar,dataschema-jar" description="Compiles SDK sources">
    <mkdir dir="${sdk.classes.dir}"/>
    <echo message="Compiling SDK source files..." />
    <javac srcdir="${sdk.src.dir}" destdir="${sdk.classes.dir}" source="1.5" target="1.5" debug="on">
      <classpath refid="build.classpath"/>
    </javac>
  </target>

  <target name="jar" depends="compile-sdk" description="Creates SDK Jar" >

    <echo message="Copying required resources..." />
    <copy toDir="${sdk.classes.dir}/com/amazonaws/mturk/service/axis/">
      <fileset dir="${etc.dir}">
        <include name="previewHITHeader.xml"/>
        <include name="previewHITFooter.xml"/>
      </fileset>
    </copy>

    <copy toDir="${sdk.classes.dir}/com/amazonaws/mturk/addon">
      <fileset dir="${etc.dir}/schema/2005-10-01">
        <include name="QuestionForm.xsd"/>
      </fileset>
      <fileset dir="${etc.dir}/schema/2006-07-14">
        <include name="FormattedContentXHTMLSubset.xsd"/>
        <include name="ExternalQuestion.xsd"/>
      </fileset>
      <fileset dir="${etc.dir}/xform">
        <include name="HIT.xsl"/>
      </fileset>
    </copy>

    <echo message="Creating SDK jar..." />
    <jar destfile="${sdk.jar}">
      <fileset dir="${sdk.classes.dir}" includes="com/**" excludes="**/test/*.class"/>
      <fileset dir="${sdk.src.dir}" includes="**/*.java"/>
      <!-- Note: The notice file is different for the jars than the distributable. -->
      <fileset dir="${sdk.src.dir}" includes="NOTICE"/>
      <fileset dir="." includes="LICENSE"/>
    </jar>

  </target>

  <target name="compile-maise" description="Compile the MAISE source files">
    <echo message="Compiling the MAISE-MTurk java source files..." />
    <mkdir dir="${maise.classes.dir}"/>
    <javac destdir="${maise.classes.dir}" debug="on">
      <src path="${maise.src.dir}" />
      <classpath refid="build.maise.classpath"/>
    </javac>
  </target>

  <target name="uploader" depends="compile-maise" description="Run the Uploader app">
    <echo message="Running the Uploader application..." />
    <java dir="${maise.src.dir}/uploader/" classname="uploader.Uploader" fork="true" maxmemory="500m">
      <arg line="${file}"/>
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="cleaner" depends="compile-maise" description="Run the Cleaner app">
    <echo message="Running the Cleaner application..." />
    <java dir="${maise.src.dir}/cleaner/" classname="cleaner.Cleaner" fork="true" maxmemory="500m">
      <arg line="${delAssignable}"/>
      <arg line="${delCompleted}"/>
      <arg line="${field}"/>
      <arg line="${query}"/>
      <arg line="${firstPage}"/>
      <arg line="${lastPage}"/>
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="wmt_server" depends="compile-maise" description="Run the WMTServer app">
    <echo message="Running the WMT Server application..." />
    <java dir="${maise.src.dir}/wmt_server/" classname="wmt_server.WMTServer" fork="true" maxmemory="500m">
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="wmt_server_ACC" depends="compile-maise" description="Run the WMTServer-ACC app">
    <echo message="Running the WMT Server-ACC application..." />
    <java dir="${maise.src.dir}/wmt_server_ACC/" classname="wmt_server_ACC.WMTServerACC" fork="true" maxmemory="500m">
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="wmt_generator_public" depends="compile-maise" description="Run the WMTGen-public app">
    <echo message="Running the WMT Generator (public) application..." />
    <java dir="${maise.src.dir}/wmt_generator_public/" classname="wmt_generator_public.WMTGen_pub" fork="true" maxmemory="500m">
      <classpath refid="runtime.classpath"/>
    </java>
  </target>



  <target name="retriever" depends="compile-maise" description="Run the Retriever app">
    <echo message="Running the Retriever application..." />
    <java dir="${maise.src.dir}/retriever/" classname="retriever.Retriever" fork="true" maxmemory="500m">
      <arg line="${answers}"/>
      <arg line="${field}"/>
      <arg line="${query}"/>
      <arg line="${decisionPass}"/>
      <arg line="${rejectList}"/>
      <arg line="${relist}"/>
      <arg line="${firstPage}"/>
      <arg line="${lastPage}"/>
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="extender" depends="compile-maise" description="Run the Extender app">
    <echo message="Running the Extender application..." />
    <java dir="${maise.src.dir}/extender/" classname="extender.Extender" fork="true" maxmemory="500m">
      <arg line="${field}"/>
      <arg line="${query}"/>
      <arg line="${time}"/>
      <arg line="${firstPage}"/>
      <arg line="${lastPage}"/>
      <classpath refid="runtime.classpath"/>
    </java>
  </target>



  <target name="block_worker" depends="compile-maise" description="Run the BlockWorker app">
    <echo message="Running the Block Worker application..." />
    <java dir="${maise.src.dir}/block_worker/" classname="block_worker.BlockWorker" fork="true" maxmemory="500m">
      <arg line="${file}"/>
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="email_workers" depends="compile-maise" description="Run the BlockWorker app">
    <echo message="Running the Email Workers application..." />
    <java dir="${maise.src.dir}/email_workers/" classname="email_workers.EmailWorkers" fork="true" maxmemory="500m">
      <arg line="${workerList}"/>
      <arg line="${message}"/>
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="create_qual" depends="compile-maise" description="Run the CreateQualification app">
    <echo message="Running the Create Qualification application..." />
    <java dir="${maise.src.dir}/create_qual/" classname="create_qual.CreateQualification" fork="true" maxmemory="500m">
      <classpath refid="runtime.classpath"/>
    </java>
  </target>

  <target name="copy-test-resources" description="Copies resources required by the tests">
    <mkdir dir="${sdk.test.classes.dir}/etc"/>
    <copy toDir="${sdk.test.classes.dir}/etc" >
      <fileset dir="${etc.dir}" >
        <include name="test/*.*" />
      </fileset>
    </copy>
  </target>

  <target name="doc" description="Generates Javadoc" >
    <mkdir dir="${doc.dir}" />
    <javadoc destdir="${doc.dir}" access="protected" classpathref="runtime.classpath">
      <fileset dir="${sdk.src.dir}" includes="**/*.java" />
      <fileset dir="${maise.src.dir}" includes="**/*.java" />
    </javadoc>
  </target>

  <target name="clean" description="Deletes all the generated artifacts.">
    <delete dir="${output.dir}" />
    <delete dir="${doc.dir}" />
    <delete dir="${dist.dir}" />
  </target>

  <target name="help" description="Show ant targets">
    <echo message="Run 'ant uploader' to upload files to MTurk and create your HITs." />
    <echo message="Run 'ant retriever' to run the data retrieval module." />
    <echo message="Run 'ant cleaner' to delete some or all of your HITs." />
  </target>

</project>

