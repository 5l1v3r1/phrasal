#########################################
# Java command (must have MT stuff in class
# path; and locales must be set correctly)
#########################################

SYSID=ce-tiny

#########################################
# Language/data specific variables:
#########################################

### Language identifiers:
F=zh
E=en

#########################################
# Data:
#########################################

### How many sentence pairs used for training:
LINES=100000

### MT word-aligned training data:
TRAIN=/scr/nlp/data/gale2/GrammaticalTrainingSubsetEval/TM

### Language model:
GIGA=/scr/nlp/data/gale/acl_2005_workshop/lm/europarl.en.srilm

### Dev/test corpus and genre identifiers:
DEVID=mt06
TESTID=mt05

### Directory containing reference translations:
REFS=/scr/nlp/data/gale/NIST-MT-eval-data/

### References:
DEV_REF=$(REFS)/$(DEVID)$(TYPE)/chinese
TEST_REF=$(REFS)/$(TESTID)$(TYPE)/chinese

#########################################
# Phrase extraction heuristics:
#########################################

### Specify alignment merging heuristic:
ALIGN=grow-diag

### Lexicalized re-ordering model identifier:
LO_ID=msd-bidirectional-fe

### Parameters for lexicalized reordering model:
### (if empty, uses default)
LO_ARGS=

### Number of columns produced by lexicalized re-ordering extractor:
LO_SZ=6

### Other options:
XOPTS=-phrasalLexicalizedModel true -maxLen 500 -maxELen 500

#########################################
# Pruning:
#########################################

### Maximum phrase length:
maxPLen=7

### Minimum p(e|f) probability:
### (Note: filtering based on p(f|e), lex(e|f), lex(f|e)
### isn't really effective)
MINP=1e-4

#########################################
# Memory and extraction duration:
#########################################

### How much memory for Java:
MEMSIZE=3000m
MMEMSIZE=3000m
PMEMSIZE=3000m
PMEMSIZE_BM=3000m

### Whether to compute exact relative frequencies p(f|e). 
### If so, requires two passes over training data. 
### Setting this to false requires only one pass, and 
### generally causes a .2-.3 BLEU point drop.
exactPhiCounts=true

### In how many chunks to split phrase extraction. Setting the
### value to X makes phrase extraction run X times slower,
### though one needs about X times less memory.
### Note: "split" means we split the dev/test-set phrases to score
### into X chunks, and make 1-2 passes over the training data
### for each one of them.
### (if you run out of memory, increase the split value)
SPLIT=-split 1

#########################################
# Debug levels
#########################################

DEBUG_PHRASAL=-DMultiBeamDecoderDebug=true

#########################################
# Pre- and post-processing:
#########################################

PRE=perl -I$(ESCRIPTS) -I$(SCRIPTS) $(SCRIPTS)/pre_process_unk.pl -n -t
POST=perl $(SCRIPTS)/remove_unk | en_truecaser

#########################################
# Phrasal MERT:
# (in case you run a customized version)
#########################################

PM=phrasal-mert.pl

#########################################
# Extension of input files:
# unk : with unk words
# prep : with preprocessing
#########################################

IE=prep
FE=unk

#########################################
# LM filtering script:
#########################################

LM_FILTER_SCRIPT=filter_lm_unigram

#########################################
# Size of test-time nbest list:
#########################################

N=200

#########################################
# Misc
#########################################

EXTRACT=fast
JAVA=java
THREADS=-threads 4
