package edu.stanford.nlp.mt.tools;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import edu.stanford.nlp.mt.Phrasal;
import edu.stanford.nlp.mt.base.IOTools;
import edu.stanford.nlp.mt.base.IString;
import edu.stanford.nlp.mt.base.IStrings;
import edu.stanford.nlp.mt.base.ScoredFeaturizedTranslation;
import edu.stanford.nlp.mt.base.Sequence;
import edu.stanford.nlp.mt.metrics.BLEUMetric;
import edu.stanford.nlp.stats.Counter;

/**
 * Plot a learning curve from a list of weights generated by OnlineTuner.
 * 
 * @author Spence Green
 *
 */
public class OnlineLearningCurve {

  private static List<List<Sequence<IString>>> loadReferences(String[] filenames, int sourceLength) {
    List<List<Sequence<IString>>> references = new ArrayList<List<Sequence<IString>>>(sourceLength);
    for (String filename : filenames) {
      List<Sequence<IString>> refList = IStrings.fileSplitToIStrings(filename);
      assert refList.size() == sourceLength;
      for (int i = 0; i < sourceLength; ++i) {
        if (references.size() <= i) references.add(new ArrayList<Sequence<IString>>(filenames.length));
        references.get(i).add(refList.get(i));
      }
    }
    assert references.size() == sourceLength;
    return references;
  }

  /**
   * @param args
   */
  public static void main(String[] args) {
    if (args.length < 4) {
      System.err.printf("Usage: java %s ini_file input_file ref_csv_list wts [wts]%n", 
          OnlineLearningCurve.class.getName());
      System.exit(-1);
    }
    String iniFile = args[0];
    String inputFile = args[1];
    final List<Sequence<IString>> sourceList = IStrings.fileSplitToIStrings(inputFile);
    String[] refFiles = args[2].split(",");
    final List<List<Sequence<IString>>> references = loadReferences(refFiles, sourceList.size());

    // Read the list of weights
    List<String> wts = new ArrayList<String>();
    for (int i = 3; i < args.length; ++i) {
      wts.add(args[i]);
    }

    System.err.println("Loading Phrasal...");
    Phrasal p = null;
    try {
      Map<String, List<String>> config = Phrasal.readConfig(iniFile);
      // Don't write an nbest list
      config.remove(Phrasal.NBEST_LIST_OPT);
      p = Phrasal.loadDecoder(config);
    } catch (IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }

    final int numThreads = p.getNumThreads();
    for (String wtsFile : wts) {
      try {
        Counter<String> w = IOTools.readWeights(wtsFile);
        for (int i = 0; i < numThreads; ++i) {
          p.getScorer(i).updateWeights(w);
        }
      } catch (IOException e) {
        e.printStackTrace();
      } catch (ClassNotFoundException e) {
        e.printStackTrace();
      }
      
      System.err.printf("Decoding with %s%n", wtsFile);
      
      List<Sequence<IString>> translations = p.decode(sourceList);
      BLEUMetric<IString, String> bleu = new BLEUMetric<IString, String>(references, false);
      BLEUMetric<IString, String>.BLEUIncrementalMetric incMetric = bleu
          .getIncrementalMetric();
      for (Sequence<IString> translation : translations) {
        ScoredFeaturizedTranslation<IString,String> nbestTranslation = 
            new ScoredFeaturizedTranslation<IString,String>(translation,null,0.0);
        incMetric.add(nbestTranslation);
      }
      System.out.printf("%s\t%.2f%n",wtsFile,100.0*incMetric.score());
    }
  }
}
